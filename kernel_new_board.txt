ADDSP3 R0 0x0000;0x00
ADDSP3 R0 0x0000;0x01
NOP;0x02

;保存用户程序寄存器的地址 
;0xBF10  0xBF11 BF12 0xBF13 BF14 0xBF15
; R0    R1   R2   R3   R4   R5  

B START;0x03
NOP

DELINT:   ;中断处理程序
	NOP
	NOP
	NOP
	;保存用户程序现场
	LI R6 0xBF
	SLL R6 R6 0x0000
	ADDIU R6 0x10					;R6=0xBF10
	SW R6 R0 0x0000
	SW R6 R1 0x0001
	SW R6 R2 0x0002
	

	

	
	;R1=中断号
	LW_SP R1 0x0000
	ADDSP 0x0001
	LI R0 0x00FF
	AND R1 R0
	
	;R2=应用程序的pc
	LW_SP R2 0x0000
	ADDSP 0x0001
	
	;保存r3
	ADDSP 0xFFFF
	SW_SP R3 0x0000


	
	;保存用户程序返回地址
	ADDSP 0xFFFF
	SW_SP R7 0x0000
	
	;提示终端，进入中断处理
	LI R3 0x000F
	MFPC R7 
	ADDIU R7 0x0003  
	NOP
	B TESTW 	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00
	SW R6 R3 0x0000
	NOP
	;输出中断号
	MFPC R7 
	ADDIU R7 0x0003  
	NOP
	B TESTW 	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00 
	SW R6 R1 0x0000
	NOP
	
	;提示终端，中断处理结束
	LI R3 0x000F
	MFPC R7 
	ADDIU R7 0x0003  
	NOP
	B TESTW 	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00 
	SW R6 R3 0x0000
	NOP
	
	;R6保存返回地址
	ADDIU3 R2 R6 0x0000
	
	;用r3=IH（高位变成1）
	MFIH R3
	LI R0 0x0080
	SLL R0 R0 0x000
	OR R3 R0
	
	;恢复现场
	LI R7 0xBF
	SLL R7 R7 0x0000
	ADDIU R7 0x10					;R7=0xBF10
	LW R7 R0 0x0000
	LW R7 R1 0x0001
	LW R7 R2 0x0002
	
	;r7=用户程序返回地址
	LW_SP R7 0x0000
	
	ADDSP 0x0001
	ADDSP 0x0001
	NOP
	MTIH R3;
	JR R6
	LW_SP R3 0x00FF
	
	NOP	


;init  0x8251
START:
	;初始化IH寄存器，最高位为1时，允许中断，为0时不允许。初始化为0，kernel不允许中断
	LI R0 0x07;0x65	
	MTIH R0;0x66
	;初始化栈地址
	LI R0 0x00BF,;0x67 
	SLL R0 R0 0x0000;0x68
	ADDIU R0 0x10;0x69					;R0=0xBF10 
	MTSP R0;0x6a
	NOP;0x6b
	
	;用户寄存器值初始化
	LI R6 0x00BF ;0x6c
	SLL R6 R6 0x0000;0x6d
	ADDIU R6 0x10;0x6e					;R6=0xBF10 
	LI R0 0x0000;0x6f
	SW R6 R0 0x0000;0x70
	SW R6 R0 0x0001;0x71
	SW R6 R0 0x0002;0x72
	SW R6 R0 0x0003;0x73
	SW R6 R0 0x0004;0x74
	SW R6 R0 0x0005;0x75
	SW R6 R0 0x0006;0x76
	ADDIU R0 0x0001;0x77
	SW R6 R0 0x0007;0x78
	ADDIU R0 0x0001;0x79
	SW R
	;少东西	
	;WELCOME
	MFPC R7 ;0x7d,MFPC错
	ADDIU R7 0x0003 ;0x7e  
	NOP 0x7f
	B TESTW;;R7=0 0x80 	
	LI R6 0x00BF ;0x81
	SLL R6 R6 0x0000;0x82 
	LI R0 0x004F;0x83
	SW R6 R0 0x0000;0x84
	NOP;0x85
	
	MFPC R7;0x86 
	ADDIU R7 0x0003;0x87  
	NOP;0x88
	B TESTW;0x89 	
	LI R6 0x00BF;0x8a 
	SLL R6 R6 0x0000;0x8b 
	LI R0 0x004B;0x8c
	SW R6 R0 0x0000;0x8d
	NOP;0x8e
	
	MFPC R7;0x8f 
	ADDIU R7 0x0003;0x90  
	NOP;0x91
	B TESTW;0x92	
	LI R6 0x00BF;0x93 
	SLL R6 R6 0x0000;0x94 
	LI R0 0x000A;0x95
	SW R6 R0 0x0000;0x96
	NOP;0x97
	
	MFPC R7;0x98 
	ADDIU R7 0x0003;0x99  
	NOP;0x9a
	B TESTW;0x9b 	
	LI R6 0x00BF;0x9c 
	SLL R6 R6 0x0000;0x9d 
	LI R0 0x000D;0x9e
	SW R6 R0 0x0000;0x9f
	NOP;0xa0
	

	

	

	
BEGIN:          ;检测命令
	;接收字符，保存到r1
	MFPC R7;0xa1
	ADDIU R7 0x0003;0xa2	
	NOP;0xa3	
	B TESTR;0xa4	
	NOP;0xa5
	LI R6 0x00BF;0xa6 
	SLL R6 R6 0x0000;0xa7 
	LW R6 R1 0x0000;0xa8
	LI R6 0x00ff;0xa9 
  AND R1 R6;0xaa 
	NOP;0xab	
	

	;检测是否为R命令		
	LI R0 0x0052;0xac
	CMP R0 R1;0xad
	BTEQZ SHOWREGS;0xae	
	NOP	;0xaf
	;检测是否为D命令
	LI R0 0x0044;0xb0
	CMP R0 R1;0xb1
	BTEQZ SHOWMEM;0xb2
	NOP	;0xb3
	
	;检测是否为A命令
	LI R0 0x0041;0xb4
	CMP R0 R1;0xb5
	BTEQZ GOTOASM;0xb6
	NOP;0xb7	
	
	;检测是否为U命令
	LI R0 0x0055;0xb8
	CMP R0 R1
	BTEQZ GOTOUASM
	NOP	
	;检测是否为G命令
	LI R0 0x0047
	CMP R0 R1
	BTEQZ GOTOCOMPILE
	NOP		
	
	B BEGIN
	NOP

;各处理块的入口
GOTOUASM:
	NOP
	B UASM
	NOP
GOTOASM:
	NOP;0xc5
	B ASM;0xc6
	NOP
	
GOTOCOMPILE:
	NOP
	B COMPILE
	NOP
  
	
;测试8251是否能写
TESTW:	
	NOP；0xcb	 		
	LI R6 0x00BF;0xcc 
	SLL R6 R6 0x0000 ;0xcd
	ADDIU R6 0x0001;0xce 
	LW R6 R0 0x0000;0xcf 
	LI R6 0x0001;0xd0 
	AND R0 R6;0xd1 
	BEQZ R0 TESTW     ;BF01&1=0 则等待,0xd2	
	NOP	;0xd3	
	JR R7;0xd4
	NOP 
	

	
;测试8251是否能读
TESTR:	
	NOP;0xd6	
	LI R6 0x00BF;0xd7 
	SLL R6 R6 0x0000;0xd8 
	ADDIU R6 0x0001;0xd9 
	LW R6 R0 0x0000;0xda 
	LI R6 0x0002;0xdb
	AND R0 R6;0xdc 
	BEQZ R0 TESTR   ;BF01&2=0  则等待,0xdd	
	NOP;0xde	
	JR R7;0xdf
	NOP 		
	
	
SHOWREGS:    ;R命令，打印R0-R5
	LI R1 0x0006  ;R1递减  
	LI R2 0x0006   ;R2不变
	
LOOP:
	LI R0  0x00BF
	SLL R0 R0 0x0000
	ADDIU R0 0x0010
	SUBU R2 R1 R3   ;R2=0,1,2,3
	ADDU R0 R3 R0   ;R0=BF10...
	LW R0 R3 0x0000    ;R3=用户程序的 R0,R1,R2	

	;发送低八位
	MFPC R7
	ADDIU R7 0x0003	
	NOP
	B TESTW	
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=BF00	
	SW R6 R3 0x0000	
	;发送高八位
	SRA R3 R3 0x0000
	MFPC R7
	ADDIU R7 0x0003	
	NOP
	B TESTW	
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00	
	SW R6 R3 0x0000	
	
	ADDIU R1 0xFFFF
	NOP
	BNEZ R1 LOOP
	NOP	
	B BEGIN
	NOP
	

	
	

	
	
	
SHOWMEM:  ;查看内存	
;D读取地址低位到r5
	MFPC R7    0x0100
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R5 0x0000	
	LI R6 0x00FF
	AND R5 R6
	NOP	
	
	;读取地址高位到r1
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R1 0x0000
	LI R6 0x00FF
	AND R1 R6
	NOP	
	
	
	
	;R1存储地址
	SLL R1 R1 0x0000      ;0x0116
	OR R1 R5
	
	;读取显示次数低位到R5
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R5 0x0000
	LI R6 0x00FF
	AND R5 R6
	NOP	
	;读取显示次数高位到R2
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R2 0x0000
	LI R6 0x00FF
	AND R2 R6
	NOP	
	;R2保存内存个数
	SLL R2 R2 0x0000
	OR R2 R5

	
		;循环发出	
	
MEMLOOP:		
	
	LW R1 R3 0x0000    ;R3为内存数据	0x0130

	;发送低八位
	MFPC R7
	ADDIU R7 0x0003	
	NOP
	B TESTW	
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00	
	SW R6 R3 0x0000	
	;发送高八位

	SRA R3 R3 0x0000
	MFPC R7
	ADDIU R7 0x0003	
	NOP
	B TESTW	
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00	
	SW R6 R3 0x0000	
	
	ADDIU R1 0x0001   ;R1=地址加加加
	ADDIU R2 0xFFFF
	NOP
	BNEZ R2 MEMLOOP
	NOP	

	B BEGIN
	NOP		


 ;汇编	
ASM:  
	;A命令读取地址低位到r5
	MFPC R7;0x0149
	ADDIU R7 0x0003;0x014a	
	NOP;0x014b	
	B TESTR	;0x014c
	NOP;0x014d
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R5 0x0000
	LI R6 0x00FF
	AND R5 R6
	NOP;0x0153	
	;读取地址高位到r1
	MFPC R7;0x0154
	ADDIU R7 0x0003;0x0155	
	NOP;0x0156	
	B TESTR;0x0157	
	NOP;0x0158
	LI R6 0x00BF;0x0159 
	SLL R6 R6 0x0000;0x015a 
	LW R6 R1 0x0000;0x015b
	LI R6 0x00FF
	AND R1 R6
	NOP	
	
	;R1存储地址
	SLL R1 R1 0x0000
	OR R1 R5
	
3	
	
	
	;检测地址是否合法
	LI R0 0x0000;0x0161
	CMP R0 R1      
  	BTEQZ GOTOBEGIN;0x0163
	NOP	
	
 
	;读取数据低位到R5
	MFPC R7;0x0165
	ADDIU R7 0x0003	
	NOP	;0x0167
	B TESTR	
	NOP;0x0169
	LI R6 0x00BF 
	SLL R6 R6 0x0000;0x016b 
	LW R6 R5 0x0000
	LI R6 0x00FF;0x016d
	AND R5 R6
	NOP;0x016f	
	

	;读取数据高位到R2
	MFPC R7
	ADDIU R7 0x0003	
	NOP;0x0172	
	B TESTR	
	NOP;0x0174
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R2 0x0000
	LI R6 0x00FF
	AND R2 R6
	NOP;0x017a	
	;R2保存数据
	SLL R2 R2 0x0000
	OR R2 R5
			
	SW R1 R2 0x0000	
	NOP
	
	B ASM
	NOP
	
GOTOBEGIN:
	NOP
	B BEGIN
	NOP
	
	
	
	
;反汇编：将需要反汇编的地址处的值发给终端处理	
UASM:
;读取地址低位到r5
	MFPC R7                        ;0x0184
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R5 0x0000
	LI R6 0x00FF
	AND R5 R6
	NOP	
	;读取地址高位到r1
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R1 0x0000
	LI R6 0x00FF
	AND R1 R6
	NOP	   
	
	
	
	;R1存储地址
	SLL R1 R1 0x0000              ;0x019a
	OR R1 R5
	
	;读取显示次数低位到R5
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R5 0x0000
	LI R6 0x00FF
	AND R5 R6
	NOP	
	;读取显示次数高位到R2
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R2 0x0000
	LI R6 0x00FF
	AND R2 R6
	NOP	
	;R2保存内存个数
	SLL R2 R2 0x0000
	OR R2 R5

	
		;循环发出	
	
UASMLOOP:		
	
	LW R1 R3 0x0000    ;R3为内存数据	

	;发送低八位
	MFPC R7
	ADDIU R7 0x0003	
	NOP
	B TESTW	
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00	
	SW R6 R3 0x0000	
	;发送高八位

	SRA R3 R3 0x0000
	MFPC R7
	ADDIU R7 0x0003	
	NOP
	B TESTW	
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00	
	SW R6 R3 0x0000	
	
	ADDIU R1 0x0001   ;R1=地址加加加
	ADDIU R2 0xFFFF
	NOP
	BNEZ R2 UASMLOOP
	NOP	

	B BEGIN
	NOP			
	
;连续执行
COMPILE:
	;读取地址低位到R5
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R5 0x0000
	LI R6 0x00FF
	AND R5 R6
	NOP	
	;读取内存高位到R2
	MFPC R7
	ADDIU R7 0x0003	
	NOP	
	B TESTR	
	NOP
	LI R6 0x00BF 
	SLL R6 R6 0x0000 
	LW R6 R2 0x0000
	LI R6 0x00FF
	AND R2 R6
	NOP	
	;R2保存内存地址  传给r6
	SLL R2 R2 0x0000
	OR R2 R5
	ADDIU3 R2 R6 0x0000
	
	
	LI R7 0x00BF
	SLL R7 R7 0x0000
	ADDIU R7 0x0010
	
	LW R7 R5 0x0005
	ADDSP 0xFFFF
	SW_SP R5 0x0000
	
	
	;中断保存在R5中
	MFIH R5
	LI R1 0x0080
	SLL R1 R1 0x000
	OR R5 R1
	
	
	
	;恢复现场
	LW R7 R0 0x0000
	LW R7 R1 0x0001
	LW R7 R2 0x0002
	LW R7 R3 0x0003
	LW R7 R4 0x0004
	
	
	
	MFPC R7
	ADDIU R7 0x0004
	MTIH R5    ;IH高位赋1	
	JR R6
	LW_SP R5 0x0000  ;R5恢复现场
	
	;用户程序执行完毕，返回kernel，保存现场
	NOP
	NOP
	ADDSP 0x0001
	LI R7 0x00BF
	SLL R7 R7 0x0000
	ADDIU R7 0x0010
	
	SW R7 R0 0x0000
	SW R7 R1 0x0001
	SW R7 R2 0x0002
	SW R7 R3 0x0003
	SW R7 R4 0x0004
	SW R7 R5 0x0005
	
	;IH高位赋0
	MFIH R0
	LI R1 0x007F
	SLL R1 R1 0x0000
	LI R2 0x00FF
	OR R1 R2	
	AND R0 R1
	MTIH R0
	
	;给终端发送结束用户程序提示
	LI R1 0x0007
	MFPC R7
	ADDIU R7 0x0003	
	NOP
	B TESTW	
	NOP	
	LI R6 0x00BF 
	SLL R6 R6 0x0000 ;R6=0xBF00	
	SW R6 R1 0x0000		
	B BEGIN
	NOP	
		
	
	




	
